# -*- coding: utf-8 -*-
"""Worksheet1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O8Hb_gjaHFGMPeov1wr8GAMSBNdHb17N
"""

# que1
import numpy as np
empty_array = np.empty((2,2))
print (empty_array)

#que2
import numpy as np
ones_array = np.ones((4,2))
print (ones_array)

#que3
import numpy as np
filled_array = np.full((3,3),7)
print(filled_array)

#que4
import numpy as np
original_array = np.array([[1,3,5],[7,2,9]])
zeros_array = np.zeros_like(original_array)
print(zeros_array)

#que5
import numpy as np
original_array = np.array([[1,3,5],[7,2,9]])
ones_array = np.ones_like(original_array)
print (ones_array)

#que6
import numpy as np
new_list = [1,2,3,4]
array = np.array(new_list)
print(array)

# 4.1.1 que1
import numpy as np
array = np.arange(10, 50)
print("Array from 10 to 49 are")
print(array)

# que2
import numpy as np
array = np.arange(9)
matrix = array.reshape(3,3)
print(matrix)

# que3
import numpy as np
identity_matrix = np.eye(3)
print(identity_matrix)

# que4
import numpy as np
random_array = np.random.random(30)
mean_value = random_array.mean()
print(mean_value)

# que5
import numpy as np
random_array = np.random.random((10,10))
min_value = random_array.min()
max_value = random_array.max()
print("10*10 Random Array:" )
print(random_array)
print("minimum value:")
print(min_value)
print("maximum value:")
print(max_value)

# que6
import numpy as np
zero_array = np.zeros(10)
zero_array[4]=1
print(zero_array)

#que7
import numpy as np
arr = np.array([1,2,0,0,4,0])
reversed_arr = arr[::-1]
print(reversed_arr)

#que8
import numpy as np
n = 3
arr = np.ones((n, n), dtype=int)
arr[1:-1, 1:-1] = 0
print(arr)

#que9
import numpy as np
n = 8
matrix = np.zeros((n, n), dtype=int)
matrix[::2, ::2] = 1
matrix[1::2, 1::2] = 1
print(matrix)

# problem3 que1
import numpy as np
x = np.array([[1, 2], [3, 5]])
y = np.array([[5, 6], [7, 8]])
result = x + y
print(result)

#que2
import numpy as np
x = np.array([[1, 2], [3, 5]])
y = np.array([[5, 6], [7, 8]])
result = x - y
print(result)

#que3
import numpy as np
x = np.array([[1, 2], [3, 5]])
y = np.array([[5, 6], [7, 8]])
x_result = x * 0
y_result = y * 2
print("x = \n", x_result)
print("y = \n", y_result)

#que4
import numpy as np
x = np.array([[1, 2], [3, 5]])
y = np.array([[5, 6], [7, 8]])
x_squared = np.square(x)
y_squared = np.square(y)
print(" x=\n", x_squared)
print("y=\n", y_squared)

#que5
import numpy as np
x = np.array([[1, 2], [3, 5]])
y = np.array([[5, 6], [7, 8]])
v = np.array([9, 10])
w = np.array([11, 12])

dot_v_w = np.dot(v, w)
dot_x_v = np.dot(x, v)
dot_x_y = np.dot(x, y)

print( dot_v_w)
print( dot_x_v)
print( dot_x_y)

#que6
import numpy as np
x = np.array([[1, 2], [3, 5]])
y = np.array([[5, 6], [7, 8]])
v = np.array([9, 10])
w = np.array([11, 12])
concat_x_y = np.vstack((x, y))
concat_v_w = np.column_stack((v, w))
print("x and y \n ",concat_x_y)
print("v and w \n", concat_v_w)

#que7
import numpy as np
x = np.array([[1, 2], [3, 5]])
v = np.array([9, 10])
try:
    result = np.concatenate((x, v), axis=0)
except Exception as e:
    print(f"Error: {e}")

   # All the input arrays must have same number of dimensions. The error occurred because the dimensions of x and v were incompatible for concatenation.

#Problem4
#For the following arrays:
#A = np.array([[3,4],[7,8]]) and B = np.array([[5,3],[2,1]]);
#Prove following with Numpy:
#1. Prove A.A−1 = I.
#2. Prove AB ̸= BA.
#3. Prove (AB)T = BTAT

import numpy as np

A = np.array([[3, 4], [7, 8]])
B = np.array([[5, 3], [2, 1]])

# 1. Prove A * A^-1 = I
A_inv = np.linalg.inv(A)
result_A_A_inv = np.dot(A, A_inv)
I = np.eye(2)
print("A * A^-1 =\n", result_A_A_inv)
print("Identity Matrix I =\n", I)

# 2. Prove AB != BA
AB = np.dot(A, B)
BA = np.dot(B, A)
print("AB =\n", AB)
print("BA =\n", BA)
print("AB != BA")

# 3. Prove (AB)^T = B^T * A^T
AB_T = np.transpose(AB)
B_T_A_T = np.dot(np.transpose(B), np.transpose(A))
print("Transpose of AB = (AB)^T:\n", AB_T)
print("B^T * A^T:\n", B_T_A_T)
print("AB^T = B^TA^T")

# Solve the following system of Linear equation using Inverse Methods.
# 2x − 3y + z = −1
# x − y + 2z = −3
# 3x + y − z = 9
import numpy as np

A = np.array([[2, -3, 1],
              [1, -1, 2],
              [3, 1, -1]])
B = np.array([-1, -3, 9])
A_inv = np.linalg.inv(A)
X = np.dot(A_inv, B)
print("Solution for [x, y, z]:", X)